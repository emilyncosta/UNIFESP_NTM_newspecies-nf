/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'

        publishDir = [
            path: { "${params.outdir}/intermediate/fastqc" },
            mode: params.publish_dir_mode,
            //pattern: "*.{zip,html}"
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TRIMMOMATIC {
        ext.args = 'ILLUMINACLIP:All_PE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:40'

        publishDir = [
            path: { "${params.outdir}/intermediate/trimmomatic" },
            mode: params.publish_dir_mode,
            //pattern: "*.{fastq.gz,log,summary}"
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    }

    withName: SPADES {
        ext.args = "--careful --cov-cutoff 'auto'"

        publishDir = [
            path: { "${params.outdir}/intermediate/spades" },
            mode: params.publish_dir_mode,
            //pattern: "*.{fa.gz,gfa.gz,log}"
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: UTILS_FILTER_COV_LISTS {
        ext.args_lcov = "\$6<2.0 || \$4<500"
        ext.args_hcov =  "\$6>=2.0 && \$4>=500"

        publishDir = [
            path: { "${params.outdir}/intermediate/utils/filter_cov_lists" },
            mode: params.publish_dir_mode,
            pattern: '*.contigs.list',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

//NOTE: Reducing the tree to allow the process to run on lower end machines https://github.com/Ecogenomics/CheckM/issues/41#issuecomment-142241967
    withName: CHECKM_LINEAGEWF {
        ext.args = "--reduced_tree"

        publishDir = [
            path: { "${params.outdir}/intermediate/checkm" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    }

    withName: RAXMLNG_NO_BOOTSTRAP {
        ext.args = '--model GTR+G'

        publishDir = [
            path: { "${params.outdir}/intermediate/raxmlng/no_bootstrap" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: RAXMLNG_BOOTSTRAP {
        ext.args = '--all --model GTR+G --bs-trees 1000'

        publishDir = [
            path: { "${params.outdir}/intermediate/raxmlng/bootstrap" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
     

    withName: UTILS_FASTGREP {
        publishDir = [
            path: { "${params.outdir}/final/assemblies" },
            mode: params.publish_dir_mode,
            pattern: '*.fasta',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/final/multiqc" },
            mode: params.publish_dir_mode,
            //pattern: "multiqc*"
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    }



}
